#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_drawgraph.ipynb (unless otherwise specified).

__all__ = ['pydot', 'create_graph', 'Node', 'create_node', 'net_colors', 'show_colormap', 'Cluster', 'create_net_graph']

#Cell
from fastcore.all import *

import pydot
from matplotlib.colors import rgb2hex, hex2color

#Cell
def create_graph(defaults=None, rankdir='LR', directed=True, compound=True,
                 shape='box', style='rounded, filled', fillcolor='white', **kwargs):
    "Create a `Dot` graph with fastai/fastgraph style defaults"
    g = pydot.Dot(rankdir=rankdir, directed=directed, compound=compound, **kwargs)
    if defaults is None: defaults = dict(shape=shape, style=style, fillcolor=fillcolor)
    g.set_node_defaults(**defaults)
    return g

#Cell
def _uniq_name(): return 'n'+(uuid4().hex)

@delegates(pydot.Node)
def Node(label, node=None, tooltip=None, **kwargs):
    "Create a `pydot.Node` with a unique name"
    if not isinstance(label,str) and isinstance(label, Collection) and len(label)==2:
        label,tooltip = label
    if tooltip is None: tooltip=label
    return pydot.Node(_uniq_name(), label=str(label), tooltip=tooltip, **kwargs)

@patch
def _repr_svg_(self:pydot.Dot):
    return self.create_svg().decode('utf-8')

#Cell
@patch
@delegates(pydot.Node)
def create_node(self:pydot.Graph, label=None, node=None, **kwargs):
    "Create a `Node` and add to the `Graph`"
    if node is None: node = Node(label=label, **kwargs)
    self.add_node(node)
    return node

#Cell
@patch
def create_edge(self:pydot.Graph, node1, node2, **kwargs):
    "Create an `Edge` and add to the `Graph`"
    edge = pydot.Edge(node1, node2, **kwargs)
    self.add_edge(edge)
    return edge

#Cell
_cm = plt.get_cmap('Set3')

#Cell
net_colors = ['#ffffff'] + [rgb2hex(array(_cm(i)[:3])) for i in range(_cm.N)]

#Cell
def show_colormap(cm, figsize=(8,0.5)):
    "Utility function to display a matplotlib colormap"
    _,ax = plt.subplots(figsize=figsize)
    im = np.tile(np.linspace(0,1,cm.N), [2,1])
    ax.imshow(im, cmap=cm, aspect='auto');
    ax.axis('off')

#Cell
@patch
def create_nodes(self:pydot.Graph, labels, colors=None, **kwargs):
    "Create nodes for `labels` with optional `tooltips` and `colors`, and add to this `Graph`"
    if colors is None: colors = net_colors[:len(labels)]
    return L(self.create_node(n, fillcolor=c, **kwargs) for n,c in L(labels,colors).zip(cycled=True))

#Cell
@patch
def add_edges_seq(self:pydot.Graph, nodes):
    "Add edges between each pair of `nodes` in sequence"
    return L(self.create_edge(nodes[i], nodes[i+1]) for i,o in enumerate(nodes[:-1]))

#Cell
@delegates(pydot.Cluster)
def Cluster(label='', **kwargs):
    return pydot.Cluster(_uniq_name(), label=label, **kwargs)

@patch
def create_subgraph(self:pydot.Graph, sg):
    "Same as `Graph.add_subgraph`, but also returns the subgraph"
    self.add_subgraph(sg)
    return sg

@patch
def create_cluster(self:pydot.Graph, label, tooltip=None, style='rounded, filled', fillcolor='#77777744', **kwargs):
    "Create a `Cluster` and add it to the `Graph`"
    if tooltip is None: tooltip=label
    sg = Cluster(label=label, style=style, tooltip=tooltip, fillcolor=fillcolor, **kwargs)
    self.add_subgraph(sg)
    return sg

@patch
def __getitem__(self:pydot.Cluster, i):
    "`i`th node in `Cluster`"
    return self.get_nodes()[i]

#Cell
def create_net_graph(g, cluster_label, labels, colors=None, **kwargs):
    "Create a `Cluster` with `label` containing `nodes`"
    sg = g.create_cluster(cluster_label, **kwargs)
    nodes = sg.create_nodes(labels, colors)
    g.add_edges_seq(nodes)
    return sg

#Cell
@patch
def connect_items(self:pydot.Graph, cl1, cl2):
    "Connect two nodes or clusters"
    a,b,ltail,lhead = cl1,cl2,'',''
    if isinstance(cl1,pydot.Cluster):
        a = cl1[-1]
        ltail=cl1.get_name()
    if isinstance(cl2,pydot.Cluster):
        b = cl2[0]
        lhead=cl2.get_name()
    return self.create_edge(a, b, lhead=lhead, ltail=ltail)