#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_drawgraph.ipynb (unless otherwise specified).

__all__ = ['pydot', 'create_graph', 'quote', 'Cluster', 'net_colors', 'show_colormap']

#Cell
from fastcore.all import *

import pydot
from matplotlib.colors import rgb2hex, hex2color

#Cell
def create_graph(defaults=None, rankdir='LR', directed=True, compound=True,
                 shape='box', style='rounded, filled', fillcolor='white', **kwargs):
    "Create a `Dot` graph with fastai/fastgraph style defaults"
    g = pydot.Dot(rankdir=rankdir, directed=directed, compound=compound, **kwargs)
    if defaults is None: defaults = dict(shape=shape, style=style, fillcolor=fillcolor)
    g.set_node_defaults(**defaults)
    return g

#Cell
def _uniq_name(): return 'n'+(uuid4().hex)

def quote(x, q='"'):
    'Surround `x` with `"`'
    return f'"{x}"'

@patch
def _repr_svg_(self:pydot.Dot):
    return self.create_svg().decode('utf-8')

#Cell
def Cluster(label='', tooltip=None, style='rounded, filled', fillcolor='#55555522', **kwargs):
    "Create a `pydot.Cluster` with a unique name"
    if tooltip is None: tooltip=label
    return pydot.Cluster(_uniq_name(), label=quote(label), tooltip=quote(tooltip),
                         style=style, fillcolor=fillcolor, **kwargs)

#Cell
@patch
def nodes(self:pydot.Graph):
    "`i`th node in `Graph`"
    return L(o for o in self.get_nodes() if o.get_label() is not None)

#Cell
@patch
def __getitem__(self:pydot.Graph, i):
    "`i`th node in `Graph`"
    return self.nodes()[i]

#Cell
@patch
def add_item(self:pydot.Graph, item, **kwargs):
    "Add a `Cluster`, `Node`, or `Edge` to the `Graph`"
    if not isinstance(item, (pydot.Edge,pydot.Node,pydot.Graph)): item = Node(item, **kwargs)
    f = self.add_node     if isinstance(item, pydot.Node ) else \
        self.add_subgraph if isinstance(item, pydot.Graph) else \
        self.add_edge     if isinstance(item, pydot.Edge ) else None
    f(item)
    return item

#Cell
@patch
def add_items(self:pydot.Graph, *items, **kwargs):
    "Add `items` the `Graph`"
    return L(self.add_item(it, **kwargs) for it in items)

#Cell
@patch
def connect(self:(pydot.Node,pydot.Graph), item):
    "Connect two nodes or clusters"
    a,b,ltail,lhead = self,item,'',''
    if isinstance(self,pydot.Graph):
        a = self.last()
        ltail=self.get_name()
    if isinstance(item,pydot.Graph):
        b = item.first()
        lhead=item.get_name()
    return pydot.Edge(a, b, lhead=lhead, ltail=ltail)

#Cell
@patch
def seq_edges(self:pydot.Graph, items):
    "Add edges between each pair of nodes in `items`"
    return L(items[i].connect(items[i+1]) for i in range(len(items)-1))

#Cell
_cm = plt.get_cmap('Set3')

#Cell
net_colors = ['#ffffff'] + [rgb2hex(_cm(i)[:3]) for i in range(_cm.N)]

#Cell
def show_colormap(cm, figsize=(8,0.5)):
    "Utility function to display a matplotlib colormap"
    _,ax = plt.subplots(figsize=figsize)
    im = np.tile(np.linspace(0,1,cm.N), [2,1])
    ax.imshow(im, cmap=cm, aspect='auto');
    ax.axis('off')

#Cell
@patch
def create_nodes(self:pydot.Graph, labels, colors=None, **kwargs):
    "Create nodes for `labels` with optional `tooltips` and `colors`, and add to this `Graph`"
    if colors is None: colors = net_colors[:len(labels)]
    return L(self.create_node(n, fillcolor=c, **kwargs) for n,c in L(labels,colors).zip(cycled=True))