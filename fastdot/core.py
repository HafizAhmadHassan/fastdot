#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['pydot', 'Dot', 'quote', 'node_defaults', 'Node', 'obj2node_color', 'graph_colors1', 'graph_colors2',
           'Cluster', 'graph_edges_seq', 'seq_cluster', 'Point']

#Cell
from fastcore.all import *

import pydot
from matplotlib.colors import rgb2hex, hex2color

#Cell
def Dot(defaults=None, rankdir='LR', directed=True, compound=True, **kwargs):
    "Create a `pydot.Dot` graph with fastai/fastdot style defaults"
    return pydot.Dot(rankdir=rankdir, directed=directed, compound=compound, **kwargs)

#Cell
def _uniq_name(): return 'n'+(uuid4().hex)

def quote(x, q='"'):
    'Surround `x` with `"`'
    return f'"{x}"'

@patch
def _repr_svg_(self:pydot.Dot):
    return self.create_svg().decode('utf-8')

#Cell
def _pydot_create(f, label, name, **kwargs):
    kwargs = {k:v(label) if callable(v) else quote(v) for k,v in kwargs.items()}
    if name is None: name = _uniq_name()
    return f(name, label=quote(label), **kwargs)

#Cell
node_defaults = dict(shape='box', style='rounded, filled', fillcolor='white')

#Cell
def Node(label, tooltip=None, name=None, **kwargs):
    "Create a `pydot.Node` with a unique name"
    if not isinstance(label,str) and isinstance(label, Collection) and len(label)==2:
        label,tooltip = label
    kwargs = merge(node_defaults, kwargs)
    if tooltip is None: tooltip = label
    return _pydot_create(pydot.Node, label, name=name, tooltip=tooltip, **kwargs)

#Cell
def obj2node_color(cm, minalpha, rangealpha, o):
    "Create a consistent mapping from objects to colors, using colormap `cm`"
    h = hash(o)
    i = float(h % 256) / 256
    alpha = (h^hash('something')) % rangealpha + minalpha
    return rgb2hex(cm(i)) + f'{alpha:02X}'

#Cell
graph_colors1 = partial(obj2node_color, plt.get_cmap('rainbow'), 30, 160)
graph_colors2 = partial(obj2node_color, plt.get_cmap('tab20'), 30, 160)

#Cell
node_defaults['fillcolor'] = graph_colors1

#Cell
def Cluster(label='', tooltip=None, name=None, style='rounded, filled', fillcolor='#55555522', **kwargs):
    "Create a `pydot.Cluster` with a unique name"
    if tooltip is None: tooltip = label
    return _pydot_create(pydot.Cluster, label, name=name, tooltip=tooltip, style=style, fillcolor=fillcolor, **kwargs)

#Cell
@patch
def nodes(self:pydot.Graph):
    "`i`th node in `Graph`"
    return L(o for o in self.get_nodes() if o.get_label() is not None)

#Cell
@patch
def __getitem__(self:pydot.Graph, i):
    "`i`th node in `Graph`"
    return self.nodes()[i]

#Cell
@patch
def add_item(self:pydot.Graph, item, **kwargs):
    "Add a `Cluster`, `Node`, or `Edge` to the `Graph`"
    if not isinstance(item, (pydot.Edge,pydot.Node,pydot.Graph)): item = Node(item, **kwargs)
    f = self.add_node     if isinstance(item, pydot.Node ) else \
        self.add_subgraph if isinstance(item, pydot.Graph) else \
        self.add_edge     if isinstance(item, pydot.Edge ) else None
    f(item)
    return item

#Cell
@patch
def add_items(self:pydot.Graph, *items, **kwargs):
    "Add `items` the `Graph`"
    return L(self.add_item(it, **kwargs) for it in items)

#Cell
@patch
def first(self:pydot.Graph):
    "First node in `Graph`, searching subgraphs recursively as needed"
    nodes = self.nodes()
    if nodes: return nodes[0]
    for subg in self.get_subgraphs():
        res = subg.first()
        if res: return res

#Cell
@patch
def last(self:pydot.Graph):
    "Lastt node in `Graph`, searching subgraphs recursively as needed"
    nodes = self.nodes()
    if nodes: return nodes[-1]
    for subg in reversed(self.get_subgraphs()):
        res = subg.last()
        if res: return res

#Cell
@patch
def with_compass(self:(pydot.Node,pydot.Graph), compass=None):
    r = self.get_name()
    return f'{r}:{compass}' if compass else r

#Cell
@patch
def connect(self:(pydot.Node,pydot.Graph), item, compass1=None, compass2=None, **kwargs):
    "Connect two nodes or clusters"
    a,b,ltail,lhead = self,item,'',''
    if isinstance(self,pydot.Graph):
        a = self.last()
        ltail=self.get_name()
    if isinstance(item,pydot.Graph):
        b = item.first()
        lhead=item.get_name()
    a,b = a.with_compass(compass1),b.with_compass(compass2)
    return pydot.Edge(a, b, lhead=lhead, ltail=ltail, **kwargs)

#Cell
def graph_edges_seq(items):
    "Add edges between each pair of nodes in `items`"
    return L(items[i].connect(items[i+1]) for i in range(len(items)-1))

#Cell
@patch
def add_edges_seq(self:pydot.Graph, items):
    "Add edges between each pair of nodes in `items`"
    return self.add_items(*graph_edges_seq(items))

#Cell
def seq_cluster(items, cluster_label='', **kwargs):
    sg = Cluster(cluster_label)
    its = sg.add_items(*items, **kwargs)
    sg.add_edges_seq(its)
    return sg

#Cell
def Point(label='pnt', **kwargs):
    "Create a `Node` with a 'point' shape"
    return (Node('pnt', shape='point'))